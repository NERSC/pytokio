# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import re
import sys

BASE_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '..'))
sys.stderr.write("base_dir is " + BASE_DIR + "\n")
sys.path.insert(0, BASE_DIR)
sys.path.insert(0, os.path.join(BASE_DIR, 'tests'))

def find_version():
    """Extract the package version number from __init__.py

    See https://packaging.python.org/guides/single-sourcing-package-version
    """
    init_file = os.path.join(BASE_DIR, "tokio", "__init__.py")
    if os.path.isfile(init_file):
        match = re.search(r"^__version__\s*=\s*['\"]([^'\"]+?)['\"]",
                          open(init_file, 'r').read(),
                          re.M)
        if match:
            version = match.group(1)
            return version
        else:
            raise RuntimeError("Unable to find version string")
    else:
        raise RuntimeError("Unable to find version string")

from setup import git_version
# Return the git revision as a string
#def git_version():
#    def _minimal_ext_cmd(cmd):
#        # construct minimal environment
#        env = {}
#        for k in ['SYSTEMROOT', 'PATH', 'HOME']:
#            v = os.environ.get(k)
#            if v is not None:
#                env[k] = v
#        # LANGUAGE is used on win32
#        env['LANGUAGE'] = 'C'
#        env['LANG'] = 'C'
#        env['LC_ALL'] = 'C'
#        out = subprocess.Popen(cmd, stdout=subprocess.PIPE, env=env).communicate()[0]
#        return out
#
#    try:
#        out = _minimal_ext_cmd(['git', 'rev-parse', 'HEAD'])
#        revision = out.strip().decode('ascii')
#    except OSError:
#        revision = "unknown"
#
#    return revision


# -- Project information -----------------------------------------------------

project = 'pytokio'
copyright = 'The Regents of the University of California'
author = 'Glenn K. Lockwood'

# The short X.Y version
version = find_version()
# The full version, including alpha/beta/rc tags
release = find_version()

# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    'sphinx.ext.autodoc',
    'sphinx.ext.intersphinx',
    'sphinx.ext.todo',
    'sphinx.ext.coverage',
    'sphinx.ext.viewcode',
    'sphinx.ext.napoleon',
]

napoleon_google_docstring = True
napoleon_numpy_docstring = False
napoleon_include_init_with_doc = True
napoleon_include_private_with_doc = True
napoleon_include_special_with_doc = True
napoleon_use_ivar = True

# Add any paths that contain templates here, relative to this directory.
templates_path = ['_templates']

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'

# The master toctree document.
master_doc = 'index'

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = None

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path .
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = 'sphinx'

# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = 'sphinx_rtd_theme'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
# html_theme_options = {}

# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ['_static']

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = 'pytokiodoc'


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',

    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',

    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',

    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, 'pytokio.tex', 'pytokio Documentation',
     'Glenn K. Lockwood', 'manual'),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [
    (master_doc, 'pytokio', 'pytokio Documentation',
     [author], 1)
]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (master_doc, 'pytokio', 'pytokio Documentation',
     author, 'pytokio', 'One line description of project.',
     'Miscellaneous'),
]


# -- Extension configuration -------------------------------------------------

# -- Options for intersphinx extension ---------------------------------------

# Example configuration for intersphinx: refer to the Python standard library.
intersphinx_mapping = {
    'https://docs.python.org/': None,
    'http://pandas.pydata.org/pandas-docs/stable': None,
    'http://docs.scipy.org/doc/numpy': None,
    'http://docs.h5py.org/en/latest': None,
    'http://matplotlib.org': None,
}

def run_apidoc(_):
    """Need to explicitly run autodoc from within conf.py to enable generation
    of API documentation on RTD
    """
    import os
    argv = [
        '-o', './api',
        '--separate',
        '--no-toc',
        '--private',
        '--module-first',
        os.path.join('..', 'tokio')
    ]

    try:
        import sphinx.ext.apidoc
        sphinx.ext.apidoc.main(argv)
    except ImportError:
        import sphinx.apidoc
        argv.insert(0, sphinx.apidoc.__file__)
        sphinx.apidoc.main(argv)

def setup(app):
    app.connect('builder-inited', run_apidoc)

# Allow inserting |version| into rst files
rst_prolog = """
.. |version| replace:: %s
""" % version

# Prevent the default configs from being loaded into the documentation
os.environ['PYTOKIO_SKIP_CONFIG'] = "1"
